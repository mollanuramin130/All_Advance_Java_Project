/*
 * Question:
Design and implement a Java application that manages employee records in a company using a relational database. The application should provide the following functionalities:
•	Add a new employee with fields: id, name, department, and salary.
•	Update the salary of an existing employee by their id.
•	Retrieve a list of all employees in a specific department, sorted by salary in descending order.
•	Delete an employee record by id.
Requirements:
•	Use JDBC for database connectivity and operations.
•	Use PreparedStatement for all SQL queries to prevent SQL injection.
•	Handle SQL exceptions gracefully and display user-friendly error messages.
•	Write a class EmployeeDAO that encapsulates all database operations.
•	Demonstrate usage of your DAO class in a main method with sample data.


 */

/*
 * Create table employee(id number(4) primary key, name varchar2(20), department varchar2(10), salary number(8,2));

Table EMPLOYEE created.
 * SQL> create Sequence employee_id_seq start with 1 increment by 1;

	Sequence EMPLOYEE_ID_SEQ created.
 */

package com.ssn.employee_servlet;

import java.io.IOException;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/EmployeeServlet")
public class EmployeeServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;

	private EmployeeDAO employeeDAO;

	public void init() {
		employeeDAO = new EmployeeDAO();
	}

	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String button = request.getParameter("button");

		switch (button) {
			case "addEmployee":
				addEmployee(request, response);
				break;
			case "updateSalary":
				updateEmployee(request, response);
				break;
			case "viewEmployees":
				listEmployees(request, response);
				break;
			case "deleteEmployee":
				deleteEmployee(request, response);
				break;
			default:
				response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action");
		}
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String button = request.getParameter("button");

		switch (button) {
			case "addEmployee":
				addEmployee(request, response);
				break;
			case "updateEmployee":
				updateEmployee(request, response);
				break;
			case "viewEmployees":
				listEmployees(request, response);
				break;
			case "deleteEmployee":
				deleteEmployee(request, response);
				break;
			default:
				response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid action");
		}
	}
	private void addEmployee(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Implementation for adding an employee
		String name = request.getParameter("name");
		String department = request.getParameter("department");	
		
		double salary = Double.parseDouble(request.getParameter("salary"));
		Employee employee = new Employee( name, department, salary); // ID will be auto-generated by the database	
		try {
			employeeDAO.addEmployee(employee);
			response.sendRedirect("success.jsp");
		} catch (Exception e) {
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error adding employee: " + e.getMessage());
		}
		
	}

	private void updateEmployee(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Implementation for updating an employee's salary through their name
		String name = request.getParameter("name");
		double newSalary = Double.parseDouble(request.getParameter("newSalary"));
		try {
			employeeDAO.updateEmployeeSalary(name, newSalary);
			response.sendRedirect("success.jsp");
		} catch (Exception e) {
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error updating employee: " + e.getMessage());
		}
	}

	private void listEmployees(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Implementation for listing employees in a specific department
	}

	private void deleteEmployee(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// Implementation for deleting an employee by name
		String name = request.getParameter("name");
		try {
			employeeDAO.deleteEmployee(name);
			response.sendRedirect("success.jsp");
		} catch (Exception e) {
			response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Error deleting employee: " + e.getMessage());
		}
	}
	
}
